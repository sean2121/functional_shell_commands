  program: stmt

  stmt: funcall 

  funcall: higher_order_function function args { result = do_higher_order_funcall( val[0], val[1], val[2]) }
         | higher_order_function function accumulator args { result = do_higher_order_funcall( val[0], val[1], val[2], val[3] )}

  accumulator:  NUMBER
             |  STRING
  args: array 

  higher_order_function: IDENT

  function: IDENT
          | LPAREN PLUS NUMBER RPAREN  { result = [val[1], val[2]] } 
		  | LPAREN '++' STRING RPAREN  { resut = val[1] } 
		  | LPAREN '-' NUMBER RPAREN 
		  | LPAREN ASTERISK NUMBER RPAREN { result = [val[1], val[2]] } 
 		  | LPAREN '/' NUMBER RPAREN
		  | LPAREN PLUS RPAREN { result = val[1] }
		  | LPAREN '>' NUMBER RPAREN { result = val[1], val[2] }
		  | LPAREN '<' NUMBER RPAREN { result = val[1], val[2] }
	
		  		
  array: LBRACKET elements RBRACKET { result =  val[1]  }
  
  elements: NUMBER          { result = [val[0]] }
          | STRING           { result = [val[0]] }
          | elements COMMA NUMBER { result = val[0] + [val[2]] }
          | elements COMMA STRING { result = val[0] + [val[2]] }
  
  exp: exp '+' exp { result += val[2] }
     | exp '-' exp { result -= val[2] }
     | exp '*' exp { result *= val[2] }
     | exp '/' exp { result /= val[2] }
     | '(' exp ')' { result = val[1] }
     | '-' NUMBER  =UMINUS { result = -val[1] }
     | NUMBER