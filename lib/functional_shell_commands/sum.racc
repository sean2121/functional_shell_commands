class Sum
 token LBRACKET
 token RBRACKET
 token LPAREN
 token RPAREN 
 token COMMA
 token NUMBER
 token STRING
 token ARROWOP
 token IDENT
 token SLASH
 token PLUS
 token ASTERISK
		 
 prechigh
   nonassoc UMINUS
   left '*' '/'
   left '+' '-'
 preclow

rule
  program: stmt

  stmt: funcall 

  funcall: args { result = do_funcall(val[0]) }

  args: array 
			  		
  array: LBRACKET elements RBRACKET { result =  val[1]  }

  # retrun array not integer
  # TODO: should replace from directly generate array to funct call such as [val[2]]
  elements: NUMBER          { result = [val[0]] }
          | elements COMMA NUMBER { result = val[0] + [val[2]] }

  
  exp: exp '+' exp { result += val[2] }
     | exp '-' exp { result -= val[2] }
     | exp '*' exp { result *= val[2] }
     | exp '/' exp { result /= val[2] }
     | '(' exp ')' { result = val[1] }
     | '-' NUMBER  =UMINUS { result = -val[1] }
     | NUMBER
end

---- inner
require "../lib/functional_shell_commands/lex.rb"
include Lex

  def do_funcall(list)
	 list.send(:sum)
  end 	 
										
---- footer
require "./options.rb"
include Options	 
	 
args_check(0)
parser = Sum.new  
pipe_input = $stdin.read.strip.split(" ").map(&:to_i).to_s
str = "#{pipe_input}"
show_result = parser.parse(str)
puts show_result



