#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Mean < Racc::Parser

module_eval(<<'...end mean.racc/module_eval...', 'mean.racc', 48)
require "./lex.rb"
include Lex

  def do_funcall(list)	
	 list.sum(0.0) / list.length
  end 	 
										
...end mean.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,     6,     7,    12,     9,    10,    13 ]

racc_action_check = [
     8,     0,     1,     8,     6,     7,    12 ]

racc_action_pointer = [
    -1,     2,   nil,   nil,   nil,   nil,    -3,     5,    -3,   nil,
   nil,   nil,    -1,   nil ]

racc_action_default = [
   -15,   -15,    -1,    -2,    -3,    -4,   -15,   -15,   -15,    -6,
    14,    -5,   -15,    -7 ]

racc_goto_table = [
     1,     2,     3,     4,     5,     8 ]

racc_goto_check = [
     1,     2,     3,     4,     5,     6 ]

racc_goto_pointer = [
   nil,     0,     1,     2,     3,     4,    -1,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 22, :_reduce_none,
  1, 23, :_reduce_none,
  1, 24, :_reduce_3,
  1, 25, :_reduce_none,
  3, 26, :_reduce_5,
  1, 27, :_reduce_6,
  3, 27, :_reduce_7,
  3, 28, :_reduce_8,
  3, 28, :_reduce_9,
  3, 28, :_reduce_10,
  3, 28, :_reduce_11,
  3, 28, :_reduce_12,
  2, 28, :_reduce_13,
  1, 28, :_reduce_none ]

racc_reduce_n = 15

racc_shift_n = 14

racc_token_table = {
  false => 0,
  :error => 1,
  :LBRACKET => 2,
  :RBRACKET => 3,
  :LPAREN => 4,
  :RPAREN => 5,
  :COMMA => 6,
  :NUMBER => 7,
  :STRING => 8,
  :ARROWOP => 9,
  :IDENT => 10,
  :SLASH => 11,
  :PLUS => 12,
  :ASTERISK => 13,
  :UMINUS => 14,
  "*" => 15,
  "/" => 16,
  "+" => 17,
  "-" => 18,
  "(" => 19,
  ")" => 20 }

racc_nt_base = 21

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LBRACKET",
  "RBRACKET",
  "LPAREN",
  "RPAREN",
  "COMMA",
  "NUMBER",
  "STRING",
  "ARROWOP",
  "IDENT",
  "SLASH",
  "PLUS",
  "ASTERISK",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"(\"",
  "\")\"",
  "$start",
  "program",
  "stmt",
  "funcall",
  "args",
  "array",
  "elements",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'mean.racc', 25)
  def _reduce_3(val, _values, result)
     result = do_funcall(val[0])
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'mean.racc', 29)
  def _reduce_5(val, _values, result)
     result =  val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mean.racc', 33)
  def _reduce_6(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'mean.racc', 34)
  def _reduce_7(val, _values, result)
     result = val[0] + [val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'mean.racc', 37)
  def _reduce_8(val, _values, result)
     result += val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'mean.racc', 38)
  def _reduce_9(val, _values, result)
     result -= val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'mean.racc', 39)
  def _reduce_10(val, _values, result)
     result *= val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'mean.racc', 40)
  def _reduce_11(val, _values, result)
     result /= val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'mean.racc', 41)
  def _reduce_12(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'mean.racc', 42)
  def _reduce_13(val, _values, result)
     result = -val[1]
    result
  end
.,.,

# reduce 14 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Mean

require "./options.rb"
include Options

args_check(0)	 
parser = Mean.new								   
pipe_input = $stdin.read.strip.split(" ").map(&:to_i).to_s
str = "#{pipe_input}"
show_result = parser.parse(str)
puts show_result
