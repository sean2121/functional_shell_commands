#!/usr/bin/env ruby
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'
class Filter < Racc::Parser

module_eval(<<'...end filter.racc/module_eval...', 'filter.racc', 63)
require "functional_shell_commands/lex.rb"
include Lex

  def do_higher_order_funcall(higher_order_func, predicate_func, collection)
    collection.public_send(higher_order_func) do |item|
	   item.public_send(mapping(predicate_func))
    end
  end

  def mapping(predicate_func)
	case predicate_func
	when "even" then
      "even?"
	else
	  raise "#{predicate_func} is not expected as prediate functions"
	end			
  end 													
										
...end filter.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    17,    20,    26,    27,    21,     9,    19,    18,    22,    23,
    16,     8,    45,    46,    36,    13,    14,    37,    29,     5,
    28,     6,    10,    16,    30,    31,    32,    33,    34,    35,
    38,    39,    40,    41,    42,    43,    44 ]

racc_action_check = [
     9,     9,    16,    16,     9,     4,     9,     9,     9,     9,
     7,     4,    37,    37,    25,     7,     7,    25,    17,     0,
    17,     1,     6,    12,    18,    19,    20,    21,    22,    23,
    28,    30,    31,    32,    33,    34,    35 ]

racc_action_pointer = [
     9,    21,   nil,   nil,     1,   nil,    22,     8,   nil,   -12,
   nil,   nil,    21,   nil,   nil,   nil,    -5,    13,    16,    18,
    19,    20,    21,    22,   nil,    11,   nil,   nil,    25,   nil,
    26,    27,    28,    29,    30,    31,   nil,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -30,   -30,    -1,    -2,   -30,    -8,   -30,   -30,    -9,   -30,
    47,    -3,   -30,    -5,    -6,    -7,   -30,   -30,   -30,   -30,
   -30,   -30,   -30,   -30,    -4,   -30,   -19,   -20,   -30,   -15,
   -30,   -30,   -30,   -30,   -30,   -30,   -18,   -30,   -10,   -11,
   -12,   -13,   -14,   -16,   -17,   -21,   -22 ]

racc_goto_table = [
    11,     1,     2,     3,     4,    24,     7,    12,    25 ]

racc_goto_check = [
     6,     1,     2,     3,     4,     6,     5,     7,     9 ]

racc_goto_pointer = [
   nil,     1,     2,     3,     4,     2,    -7,     0,   nil,    -8,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 25, :_reduce_none,
  1, 26, :_reduce_none,
  3, 27, :_reduce_3,
  4, 27, :_reduce_4,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 30, :_reduce_none,
  1, 28, :_reduce_none,
  1, 29, :_reduce_none,
  4, 29, :_reduce_10,
  4, 29, :_reduce_11,
  4, 29, :_reduce_none,
  4, 29, :_reduce_13,
  4, 29, :_reduce_none,
  3, 29, :_reduce_15,
  4, 29, :_reduce_16,
  4, 29, :_reduce_17,
  3, 32, :_reduce_18,
  1, 33, :_reduce_19,
  1, 33, :_reduce_20,
  3, 33, :_reduce_21,
  3, 33, :_reduce_22,
  3, 34, :_reduce_23,
  3, 34, :_reduce_24,
  3, 34, :_reduce_25,
  3, 34, :_reduce_26,
  3, 34, :_reduce_27,
  2, 34, :_reduce_28,
  1, 34, :_reduce_none ]

racc_reduce_n = 30

racc_shift_n = 47

racc_token_table = {
  false => 0,
  :error => 1,
  :LBRACKET => 2,
  :RBRACKET => 3,
  :LPAREN => 4,
  :RPAREN => 5,
  :COMMA => 6,
  :NUMBER => 7,
  :STRING => 8,
  :ARROWOP => 9,
  :IDENT => 10,
  :SLASH => 11,
  :PLUS => 12,
  :ASTERISK => 13,
  :UMINUS => 14,
  "*" => 15,
  "/" => 16,
  "+" => 17,
  "-" => 18,
  "++" => 19,
  ">" => 20,
  "<" => 21,
  "(" => 22,
  ")" => 23 }

racc_nt_base = 24

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LBRACKET",
  "RBRACKET",
  "LPAREN",
  "RPAREN",
  "COMMA",
  "NUMBER",
  "STRING",
  "ARROWOP",
  "IDENT",
  "SLASH",
  "PLUS",
  "ASTERISK",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"++\"",
  "\">\"",
  "\"<\"",
  "\"(\"",
  "\")\"",
  "$start",
  "program",
  "stmt",
  "funcall",
  "higher_order_function",
  "function",
  "args",
  "accumulator",
  "array",
  "elements",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'filter.racc', 25)
  def _reduce_3(val, _values, result)
     result = do_higher_order_funcall( val[0], val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 26)
  def _reduce_4(val, _values, result)
     result = do_higher_order_funcall( val[0], val[1], val[2], val[3] )
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'filter.racc', 35)
  def _reduce_10(val, _values, result)
     result = [val[1], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 36)
  def _reduce_11(val, _values, result)
     resut = val[1]
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'filter.racc', 38)
  def _reduce_13(val, _values, result)
     result = [val[1], val[2]]
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'filter.racc', 40)
  def _reduce_15(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 41)
  def _reduce_16(val, _values, result)
     result = val[1], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 42)
  def _reduce_17(val, _values, result)
     result = val[1], val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 45)
  def _reduce_18(val, _values, result)
     result =  val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 47)
  def _reduce_19(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 48)
  def _reduce_20(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 49)
  def _reduce_21(val, _values, result)
     result = val[0] + [val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 50)
  def _reduce_22(val, _values, result)
     result = val[0] + [val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 52)
  def _reduce_23(val, _values, result)
     result += val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 53)
  def _reduce_24(val, _values, result)
     result -= val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 54)
  def _reduce_25(val, _values, result)
     result *= val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 55)
  def _reduce_26(val, _values, result)
     result /= val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 56)
  def _reduce_27(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'filter.racc', 57)
  def _reduce_28(val, _values, result)
     result = -val[1]
    result
  end
.,.,

# reduce 29 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Filter

parser = Filter.new								   
ARGV.unshift("select")
pipe_input = $stdin.read.strip.split(" ").map(&:to_i).to_s
str = ARGV.join(" ") + pipe_input
show_result = parser.parse(str)
puts show_result.join(",")
